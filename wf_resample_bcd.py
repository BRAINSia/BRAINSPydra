import pydra
import os
from pathlib import Path
from BIDSFilename import *
import nest_asyncio
import time
import uuid

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec

# Get the BCD SEM autogenerated class
from segmentation.specialized import BRAINSConstellationDetector

# Get the BCD SEM autogenerated class
from registration import BRAINSResample

nest_asyncio.apply()


######### START REsample ########################

# Define the SEM generated pydra tasks
resample = BRAINSResample()
task_resample = resample.task
input_spec_resample = resample.input_spec
output_spec_resample = resample.output_spec

# Create a list of all the files to be resampled
p = Path("/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples2/")
all_t1 = p.glob("*")
filename_objs = list(all_t1)
input_vols = []
for t1 in filename_objs:
    input_vols.append(str(t1))

# Define the inputs in the input_spec of the pydra task
SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"
task_resample.inputs.inputVolume = input_vols
task_resample.inputs.interpolationMode = "Linear"
task_resample.inputs.outputVolume = [
    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').with_suffix('').name}_resampled.nii.gz"
    for x in input_vols
]
task_resample.inputs.pixelType = "binary"
#task.inputs.referenceVolume = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/t1_average_BRAINSABC.nii.gz"
#task.inputs.warpTransform = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/atlas_to_subject.h5"

# Original locations for referenceVolume and warpTransform:
#/Shared/sinapse/chdi_bids/PREDICTHD_BIDS_DEFACE/derivatives/20200915_PREDICTHD_base_Results/sub-343219/ses-23544/TissueClassify/t1_average_BRAINSABC.nii.gz
#/Shared/sinapse/chdi_bids/PREDICTHD_BIDS_DEFACE/derivatives/20200915_PREDICTHD_base_Results/sub-343219/ses-23544/TissueClassify/atlas_to_subject.h5
task_resample.inputs.referenceVolume = "/localscratch/Users/cjohnson30/resample_refs/t1_average_BRAINSABC.nii.gz"
task_resample.inputs.warpTransform = "/localscratch/Users/cjohnson30/resample_refs/atlas_to_subject.h5"

# Use a scalar splitter to create the outputVolume from a given inputVolume
task_resample.split(("inputVolume", "outputVolume"))


############### START BCD ##############################

# Get the SEM generated pydra task for BRAINSToolsBrainsConstellationDetector
bcd = BRAINSConstellationDetector()
task = bcd.task
input_spec_bcd = bcd.input_spec
output_spec_bcd = bcd.output_spec

# Make a list of all the paths to be used as input paths
p = Path("/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples2/")
all_t1 = p.glob("*")
filename_objs = list(all_t1)
input_vols = []
for t1 in filename_objs:
    input_vols.append(str(t1))

SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"

# Define the inputs to the pydra task
task.inputs.inputTemplateModel = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/T1_50Lmks.mdl"
task.inputs.LLSModel = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/LLSModel_50Lmks.h5"
task.inputs.acLowerBound = 80.000000
task.inputs.atlasLandmarkWeights = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/template_weights_50Lmks.wts"
task.inputs.atlasLandmarks = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/template_landmarks_50Lmks.fcsv"
task.inputs.houghEyeDetectorMode = 1
task.inputs.interpolationMode = "Linear"
task.inputs.inputVolume = input_vols
task.inputs.resultsDir = f"{SESS_OUTPUT_DIR}"
task.inputs.outputLandmarksInInputSpace = [
    f"{task.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_Original.fcsv"
    for x in input_vols
]
task.inputs.outputResampledVolume = [
    f"{task.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_ACPC.nii.gz"
    for x in input_vols
]
task.inputs.outputTransform = [
    f"{task.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_Original2ACPC_transform.h5"
    for x in input_vols
]
task.inputs.outputLandmarksInACPCAlignedSpace = [
    f"{task.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_ACPC_Landmarks.fcsv"
    for x in input_vols
]

# Scalar Split the inputs based on input volume and the files generated by BCD
task.split(
    (
        "inputVolume",
        "outputLandmarksInACPCAlignedSpace",
        "outputLandmarksInInputSpace",
        "outputResampledVolume",
        "outputTransform",
    )
)


wf = pydra.Workflow(name="wf", input_spec=["cmd1", "cmd2"])

wf.inputs.cmd1 = "BRAINSResample"
wf.inputs.cmd2 = "BRAINSConstellationDetector"

#my_input_spec1 = SpecInfo(
#    name="Input",
#    fields=[
#        (
#            "file",
#            attr.ib(
#                type=str,
#                metadata={
#                    "output_file_template": "{args}",
#                    "help_string": "output file",
#                },
#            ),
#        )
#    ],
#    bases=(ShellSpec,),
#)
#
#my_input_spec2 = SpecInfo(
#    name="Input",
#    fields=[
#        (
#            "orig_file",
#            attr.ib(
#                type=str,
#                metadata={
#                    "position": 1,
#                    "help_string": "output file",
#                    "argstr": "",
#                },
#            ),
#        ),
#        (
#            "out_file",
#            attr.ib(
#                type=str,
#                metadata={
#                    "position": 2,
#                    "argstr": "",
#                    "output_file_template": "{orig_file}_cp",
#                    "help_string": "output file",
#                },
#            ),
#        ),
#    ],
#    bases=(ShellSpec,),
#)

#SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"
#task.inputs.inputVolume = input_vols
#task.inputs.interpolationMode = "Linear"
#task.inputs.outputVolume = [
#    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').with_suffix('').name}_resampled.nii.gz"
#    for x in input_vols
#]
#task.inputs.pixelType = "binary"
##task.inputs.referenceVolume = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/t1_average_BRAINSABC.nii.gz"
##task.inputs.warpTransform = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/atlas_to_subject.h5"
#
## Original locations for referenceVolume and warpTransform:
##/Shared/sinapse/chdi_bids/PREDICTHD_BIDS_DEFACE/derivatives/20200915_PREDICTHD_base_Results/sub-343219/ses-23544/TissueClassify/t1_average_BRAINSABC.nii.gz
##/Shared/sinapse/chdi_bids/PREDICTHD_BIDS_DEFACE/derivatives/20200915_PREDICTHD_base_Results/sub-343219/ses-23544/TissueClassify/atlas_to_subject.h5
#task.inputs.referenceVolume = "/localscratch/Users/cjohnson30/resample_refs/t1_average_BRAINSABC.nii.gz"
#task.inputs.warpTransform = "/localscratch/Users/cjohnson30/resample_refs/atlas_to_subject.h5"
#

wf.add(task_resample
#    ShellCommandTask(
#        name="shelly1",
#        input_spec=input_spec_resample,
#        output_spec=output_spec_resample,
#        executable=wf.lzin.cmd1,
#        args=wf.lzin.args,
#    ).split(("inputVolume", "outputVolume"))
)

#wf.add(
#    ShellCommandTask(
#        name="shelly2",
#        input_spec=my_input_spec2,
#        executable=wf.lzin.cmd2,
#        orig_file=wf.shelly1.lzout.outputVolume,
#    )
#)

wf.set_output(
    [
        ("outVol", wf.BRAINSResample.lzout.outputVolume),
#        ("out1", wf.shelly1.lzout.stdout),
#        ("cp_file", wf.shelly2.lzout.out_file),
#        ("out2", wf.shelly2.lzout.stdout),
    ]
)

with pydra.Submitter(plugin="cf") as sub:
    wf(submitter=sub)
result = wf.result()
print(result)
