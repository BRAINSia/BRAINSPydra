import pydra
import os
from pathlib import Path
from BIDSFilename import *
import nest_asyncio
import time
import uuid

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec

# Get the BCD SEM autogenerated class
from segmentation.specialized import BRAINSConstellationDetector

# Get the BCD SEM autogenerated class
from registration import BRAINSResample

from resample_cmd import fill_resample_task
from bcd_cmd import fill_bcd_task

if __name__ == '__main__':
    
#    nest_asyncio.apply()
#    
#    
#    ######### START REsample ########################
#    
#    # Define the SEM generated pydra tasks
#    resample = BRAINSResample()
#    task_resample = resample.task
#    input_spec_resample = resample.input_spec
#    output_spec_resample = resample.output_spec
#    
#    # Create a list of all the files to be resampled
#    p = Path("/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples2/")
#    all_t1 = p.glob("*")
#    filename_objs = list(all_t1)
#    input_vols = []
#    for t1 in filename_objs:
#        input_vols.append(str(t1))
#    
#    # Define the inputs in the input_spec of the pydra task
#    SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"
#    task_resample.inputs.inputVolume = input_vols
#    task_resample.inputs.interpolationMode = "Linear"
#    task_resample.inputs.outputVolume = [
#        f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').with_suffix('').name}_resampled.nii.gz"
#        for x in input_vols
#    ]
#    task_resample.inputs.pixelType = "binary"
#    #task.inputs.referenceVolume = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/t1_average_BRAINSABC.nii.gz"
#    #task.inputs.warpTransform = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/atlas_to_subject.h5"
#    
#    # Original locations for referenceVolume and warpTransform:
#    #/Shared/sinapse/chdi_bids/PREDICTHD_BIDS_DEFACE/derivatives/20200915_PREDICTHD_base_Results/sub-343219/ses-23544/TissueClassify/t1_average_BRAINSABC.nii.gz
#    #/Shared/sinapse/chdi_bids/PREDICTHD_BIDS_DEFACE/derivatives/20200915_PREDICTHD_base_Results/sub-343219/ses-23544/TissueClassify/atlas_to_subject.h5
#    task_resample.inputs.referenceVolume = "/localscratch/Users/cjohnson30/resample_refs/t1_average_BRAINSABC.nii.gz"
#    task_resample.inputs.warpTransform = "/localscratch/Users/cjohnson30/resample_refs/atlas_to_subject.h5"
#    
#    # Use a scalar splitter to create the outputVolume from a given inputVolume
#    task_resample.split(("inputVolume", "outputVolume"))
    task_resample = fill_resample_task()
    
    ############### START BCD ##############################
    
#    # Get the SEM generated pydra task for BRAINSToolsBrainsConstellationDetector
#    bcd = BRAINSConstellationDetector()
#    task_bcd = bcd.task
#    input_spec_bcd = bcd.input_spec
#    output_spec_bcd = bcd.output_spec
#    
#    # Make a list of all the paths to be used as input paths
#    p = Path("/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples2/")
#    all_t1 = p.glob("*")
#    filename_objs = list(all_t1)
#    input_vols = []
#    for t1 in filename_objs:
#        input_vols.append(str(t1))
#    
#    SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"
#    
#    # Define the inputs to the pydra task
#    task_bcd.inputs.inputTemplateModel = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/T1_50Lmks.mdl"
#    task_bcd.inputs.LLSModel = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/LLSModel_50Lmks.h5"
#    task_bcd.inputs.acLowerBound = 80.000000
#    task_bcd.inputs.atlasLandmarkWeights = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/template_weights_50Lmks.wts"
#    task_bcd.inputs.atlasLandmarks = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/template_landmarks_50Lmks.fcsv"
#    task_bcd.inputs.houghEyeDetectorMode = 1
#    task_bcd.inputs.interpolationMode = "Linear"
#    task_bcd.inputs.inputVolume = input_vols
#    task_bcd.inputs.resultsDir = f"{SESS_OUTPUT_DIR}"
#    task_bcd.inputs.outputLandmarksInInputSpace = [
#        f"{task_bcd.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_Original.fcsv"
#        for x in input_vols
#    ]
#    task_bcd.inputs.outputResampledVolume = [
#        f"{task_bcd.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_ACPC.nii.gz"
#        for x in input_vols
#    ]
#    task_bcd.inputs.outputTransform = [
#        f"{task_bcd.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_Original2ACPC_transform.h5"
#        for x in input_vols
#    ]
#    task_bcd.inputs.outputLandmarksInACPCAlignedSpace = [
#        f"{task_bcd.inputs.resultsDir}/{Path(x).with_suffix('').with_suffix('').name}_BCD_ACPC_Landmarks.fcsv"
#        for x in input_vols
#    ]
#    
#    # Scalar Split the inputs based on input volume and the files generated by BCD
#    task_bcd.split(
#        (
#            "inputVolume",
#            "outputLandmarksInACPCAlignedSpace",
#            "outputLandmarksInInputSpace",
#            "outputResampledVolume",
#            "outputTransform",
#        )
#    )
#    
    
    task_bcd = fill_bcd_task()
    
    
    wf = pydra.Workflow(name="wf", input_spec=["cmd1", "cmd2"])
    
    wf.inputs.cmd1 = "BRAINSResample"
    wf.inputs.cmd2 = "BRAINSConstellationDetector"
    
    
    wf.add(task_resample)
    task_bcd.inputVolume = wf.BRAINSResample.lzout.outputVolume
    wf.add(task_bcd)
    
    wf.set_output(
        [
            ("outVol", wf.BRAINSResample.lzout.outputVolume),
            ("outputLandmarksInACPCAlignedSpace", wf.BRAINSConstellationDetector.lzout.outputLandmarksInACPCAlignedSpace),
            ("outputLandmarksInInputSpace", wf.BRAINSConstellationDetector.lzout.outputLandmarksInInputSpace),
            ("outputResampledVolume", wf.BRAINSConstellationDetector.lzout.outputResampledVolume),
            ("outputTransform", wf.BRAINSConstellationDetector.lzout.outputTransform),
        ]
    )
    
    with pydra.Submitter(plugin="cf") as sub:
        sub(wf)
    
    result = wf.result()
    print(result)
