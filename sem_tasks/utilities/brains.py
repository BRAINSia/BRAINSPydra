"""
Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator.
"""

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import (
    SpecInfo,
    ShellSpec,
    MultiInputFile,
    MultiOutputFile,
    MultiInputObj,
)
import pydra


class BRAINSLandmarkInitializer:
    def __init__(
        self, name="BRAINSLandmarkInitializer", executable="BRAINSLandmarkInitializer"
    ):
        self.name = name
        self.executable = executable

    """
    title: BRAINSLandmarkInitializer
    category: Utilities.BRAINS
    description: Create transformation file (*.h5) from a pair of landmarks (*fcsv) files.
    version: 5.2.0
    license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt
    contributor: Eunyoung Regina Kim, Ali Ghayoor, and Hans J. Johnson
    acknowledgements: SINAPSE Lab
    """

    def get_task(self):
        input_fields = [
            (
                "inputFixedLandmarkFilename",
                attr.ib(
                    type=File,
                    metadata={
                        "argstr": "--inputFixedLandmarkFilename ",
                        "help_string": "input landmarks from fixed image *.fcsv",
                    },
                ),
            ),
            (
                "inputMovingLandmarkFilename",
                attr.ib(
                    type=File,
                    metadata={
                        "argstr": "--inputMovingLandmarkFilename ",
                        "help_string": "input landmarks from moving image *.fcsv",
                    },
                ),
            ),
            (
                "inputWeightFilename",
                attr.ib(
                    type=File,
                    metadata={
                        "argstr": "--inputWeightFilename ",
                        "help_string": "Input weight file name for landmarks. Higher weighted landmark will be considered more heavily. Weights are propotional, that is the magnitude of weights will be normalized by its minimum and maximum value. ",
                    },
                ),
            ),
            (
                "outputTransformFilename",
                attr.ib(
                    type=File,
                    metadata={
                        "argstr": "--outputTransformFilename ",
                        "help_string": "output transform file name (ex: ./moving2fixed.h5) that is appropriate for applying to the moving image to align with the fixed image.  The _Inverse file is also written that is approporate for placing the moving Landmarks with the fixed image. ",
                    },
                ),
            ),
            (
                "outputTransformType",
                attr.ib(
                    type=traits.Enum,
                    metadata={
                        "argstr": "--outputTransformType ",
                        "help_string": "The target transformation type. ",
                    },
                ),
            ),
            (
                "inputReferenceImageFilename",
                attr.ib(
                    type=File,
                    metadata={
                        "argstr": "--inputReferenceImageFilename ",
                        "help_string": "Set the reference image to define the parametric domain for the BSpline transform. ",
                    },
                ),
            ),
            (
                "bsplineNumberOfControlPoints",
                attr.ib(
                    type=traits.Int,
                    metadata={
                        "argstr": "--bsplineNumberOfControlPoints ",
                        "help_string": "Set the number of control points to define the parametric domain for the BSpline transform. ",
                    },
                ),
            ),
        ]
        output_fields = [
            (
                "outputTransformFilename",
                attr.ib(
                    type=pydra.specs.File,
                    metadata={
                        "help_string": "output transform file name (ex: ./moving2fixed.h5) that is appropriate for applying to the moving image to align with the fixed image.  The _Inverse file is also written that is approporate for placing the moving Landmarks with the fixed image. ",
                        "output_file_template": "{outputTransformFilename}",
                    },
                ),
            ),
        ]

        input_spec = SpecInfo(name="Input", fields=input_fields, bases=(ShellSpec,))
        output_spec = SpecInfo(
            name="Output", fields=output_fields, bases=(pydra.specs.ShellOutSpec,)
        )

        task = ShellCommandTask(
            name=self.name,
            executable=self.executable,
            input_spec=input_spec,
            output_spec=output_spec,
        )
        return task
