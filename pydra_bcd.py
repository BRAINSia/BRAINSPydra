import pydra
import os
from pathlib import Path
from BIDSFilename import *
import nest_asyncio
import time
import uuid

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec

# Get the BCD SEM autogenerated class
from segmentation.specialized import BRAINSConstellationDetector


nest_asyncio.apply()

bcd = BRAINSConstellationDetector()
task = bcd.task

p = Path("/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples100/")
all_t1 = p.glob("*")
filename_objs = list(all_t1)
input_vols = []
for t1 in filename_objs:
    input_vols.append(str(t1))
# input_vol = input_vols[1]

SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"


task.inputs.inputTemplateModel = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/T1_50Lmks.mdl"
task.inputs.LLSModel = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/LLSModel_50Lmks.h5"
task.inputs.acLowerBound = 80.000000
task.inputs.atlasLandmarkWeights = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/template_weights_50Lmks.wts"
task.inputs.atlasLandmarks = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/20141004_BCD/template_landmarks_50Lmks.fcsv"
task.inputs.houghEyeDetectorMode = 1
task.inputs.interpolationMode = "Linear"
task.inputs.inputVolume = input_vols
task.inputs.outputLandmarksInInputSpace = [
    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').name}_BCD_Original.fcsv"
    for x in input_vols
]
task.inputs.outputResampledVolume = [
    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').name}_BCD_ACPC.nii.gz"
    for x in input_vols
]
task.inputs.outputTransform = [
    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').name}_BCD_Original2ACPC_transform.h5"
    for x in input_vols
]
task.inputs.outputLandmarksInACPCAlignedSpace = [
    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').name}_BCD_ACPC_Landmarks.fcsv"
    for x in input_vols
]

print(f"running\n{task.cmdline}")

task.split(
    (
        "inputVolume",
        "outputLandmarksInACPCAlignedSpace",
        "outputLandmarksInInputSpace",
        "outputResampledVolume",
        "outputTransform",
    )
)
t0 = time.time()
with pydra.Submitter(plugin="cf") as sub:
    sub(task)
print(task.result())
print(f"total time: {time.time() - t0}")
