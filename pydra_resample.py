import pydra
import os
from pathlib import Path
from BIDSFilename import *
import nest_asyncio
import time
import uuid

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec

# Get the BCD SEM autogenerated class
from registration import BRAINSResample


def fill_BRAINSResample(
    inputVolsDir="/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples2/",
    inputVolsGlob="*",
    outputDir="/localscratch/Users/cjohnson30/output_dir",
    interpolationMode="Linear",
    referenceVolume="/localscratch/Users/cjohnson30/resample_refs/t1_average_BRAINSABC.nii.gz",
    warpTransform="/localscratch/Users/cjohnson30/resample_refs/atlas_to_subject.h5",
):
    # Define the SEM generated pydra tasks
    resample = BRAINSResample()
    task = resample.task

    # Create a list of all the files to be resampled
    p = Path(inputVolsDir)
    all_t1 = p.glob(inputVolsGlob)
    filename_objs = list(all_t1)
    input_vols = []
    for t1 in filename_objs:
        input_vols.append(str(t1))

    # Define the inputs in the input_spec of the pydra task
    task.inputs.inputVolume = input_vols
    task.inputs.interpolationMode = "Linear"
    task.inputs.outputVolume = [
        f"{outputDir}/{Path(x).with_suffix('').with_suffix('').name}_resampled.nii.gz"
        for x in input_vols
    ]
    task.inputs.pixelType = "binary"

    task.inputs.referenceVolume = referenceVolume
    task.inputs.warpTransform = warpTransform
    return task


task = fill_BRAINSResample()

nest_asyncio.apply()
# Use a scalar splitter to create the outputVolume from a given inputVolume
task.split(("inputVolume", "outputVolume"))
t0 = time.time()
with pydra.Submitter(plugin="cf") as sub:
    sub(task)
print(task.result())
print(f"total time: {time.time() - t0}")
