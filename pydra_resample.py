import pydra
import os
from pathlib import Path
from BIDSFilename import *
import nest_asyncio
import time
import uuid

import attr
from nipype.interfaces.base import (
    Directory,
    File,
    InputMultiPath,
    OutputMultiPath,
    traits,
)
from pydra import ShellCommandTask
from pydra.engine.specs import SpecInfo, ShellSpec

# Get the BCD SEM autogenerated class
from registration import BRAINSResample


nest_asyncio.apply()

resample = BRAINSResample()
task = resample.task


# BRAINSResample  --inputVolume /Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/template_headregion.nii.gz --interpolationMode Linear --outputVolume template_headregion.nii.gz --pixelType binary --referenceVolume /Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/t1_average_BRAINSABC.nii.gz --warpTransform /Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/atlas_to_subject.h5


p = Path("/localscratch/Users/cjohnson30/BCD_Practice/t1w_examples50/")
all_t1 = p.glob("*")
filename_objs = list(all_t1)
input_vols = []
for t1 in filename_objs:
    input_vols.append(str(t1))
# input_vol = input_vols[1]

SESS_OUTPUT_DIR = "/localscratch/Users/cjohnson30/output_dir"

# task.inputs.inputVolume = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/Atlas/template_headregion.nii.gz"
task.inputs.inputVolume = input_vols
task.inputs.interpolationMode = "Linear"
task.inputs.outputVolume = [
    f"{SESS_OUTPUT_DIR}/{Path(x).with_suffix('').with_suffix('').name}_resampled.nii.gz"
    for x in input_vols
]
task.inputs.pixelType = "binary"
task.inputs.referenceVolume = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/t1_average_BRAINSABC.nii.gz"
task.inputs.warpTransform = "/Shared/sinapse/CACHE/20200915_PREDICTHD_base_CACHE/singleSession_sub-697343_ses-50028/TissueClassify/BABC/atlas_to_subject.h5"

task.split(("inputVolume", "outputVolume"))

t0 = time.time()
with pydra.Submitter(plugin="cf") as sub:
    sub(task)
print(task.result())
print(f"total time: {time.time() - t0}")
